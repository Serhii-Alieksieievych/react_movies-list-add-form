{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","Math","random","NewMovie","state","newMovie","isValid","wasClicked","errorMessageRequiredIsHidden","errorMessageUnvalidIsHidden","validUrl","unvalidInputsCount","onAddMovie","event","preventDefault","props","addMovie","setState","clicked","name","target","validation","value","length","test","handleChange","this","onSubmit","type","onChange","onClick","onBlur","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32fc6b2a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={`${movie.imdbId}${Math.random()}`} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    newMovie: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n\n    isValid: {\n      title: false,\n      description: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n\n    wasClicked: {\n      title: false,\n      description: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n\n    errorMessageRequiredIsHidden: {\n      title: true,\n      imgUrl: true,\n      imdbUrl: true,\n      imdbId: true,\n    },\n\n    errorMessageUnvalidIsHidden: {\n      imgUrl: true,\n      imdbUrl: true,\n    },\n\n    /* eslint-disable */\n    validUrl: /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/,\n    /* eslint-enable */\n    unvalidInputsCount: 4,\n  };\n\n  onAddMovie = (event) => {\n    event.preventDefault();\n    this.props.addMovie(this.state.newMovie);\n    this.setState({\n      newMovie: {\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      },\n      wasClicked: {\n        title: false,\n        description: false,\n        imgUrl: false,\n        imdbUrl: false,\n        imdbId: false,\n      },\n      isValid: {\n        title: false,\n        description: true,\n        imgUrl: false,\n        imdbUrl: false,\n        imdbId: false,\n      },\n      unvalidInputsCount: 4,\n    });\n  }\n\n  clicked = (event) => {\n    const { name } = event.target;\n\n    this.setState(state => ({\n      wasClicked: {\n        ...state.wasClicked,\n        [name]: true,\n      },\n    }));\n  }\n\n  validation = (event) => {\n    const { isValid } = this.state;\n    const { name, value } = event.target;\n\n    if (name !== 'description') {\n      if (value.length > 0) {\n        if (name === 'title' || name === 'imdbId') {\n          if (isValid[name] !== true) {\n            this.setState(state => ({\n              unvalidInputsCount: state.unvalidInputsCount - 1,\n            }));\n          }\n        }\n\n        this.setState(state => ({\n          isValid: {\n            ...state.isValid,\n            [name]: true,\n          },\n          errorMessageRequiredIsHidden: {\n            ...state.errorMessageRequiredIsHidden,\n            [name]: true,\n          },\n        }));\n      } else {\n        if (isValid[name] !== false) {\n          this.setState(state => ({\n            unvalidInputsCount: state.unvalidInputsCount + 1,\n          }));\n        }\n\n        this.setState(state => ({\n          isValid: {\n            ...state.isValid,\n            [name]: false,\n          },\n          errorMessageRequiredIsHidden: {\n            ...state.errorMessageRequiredIsHidden,\n            [name]: false,\n          },\n        }));\n      }\n    }\n\n    if (name === 'imdbUrl' || name === 'imgUrl') {\n      if (!this.state.validUrl.test(value) && value.length > 0) {\n        if (isValid[name] !== false) {\n          this.setState(state => ({\n            unvalidInputsCount: state.unvalidInputsCount + 1,\n          }));\n        }\n\n        this.setState(state => ({\n          isValid: {\n            ...state.isValid,\n            [name]: false,\n          },\n          errorMessageUnvalidIsHidden: {\n            ...state.errorMessageUnvalidIsHidden,\n            [name]: false,\n          },\n        }));\n      } else if (this.state.validUrl.test(value)) {\n        if (isValid[name] !== true) {\n          this.setState(state => ({\n            unvalidInputsCount: state.unvalidInputsCount - 1,\n          }));\n        }\n\n        this.setState(state => ({\n          isValid: {\n            ...state.isValid,\n            [name]: true,\n          },\n          errorMessageUnvalidIsHidden: {\n            ...state.errorMessageUnvalidIsHidden,\n            [name]: true,\n          },\n        }));\n      }\n    }\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      newMovie: {\n        ...state.newMovie,\n        [name]: value,\n      },\n      errorMessageRequiredIsHidden: {\n        ...state.errorMessageRequiredIsHidden,\n        [name]: true,\n      },\n      errorMessageUnvalidIsHidden: {\n        ...state.errorMessageUnvalidIsHidden,\n        [name]: true,\n      },\n    }));\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state.newMovie;\n\n    const {\n      isValid,\n      wasClicked,\n      errorMessageRequiredIsHidden,\n      errorMessageUnvalidIsHidden,\n      unvalidInputsCount,\n    } = this.state;\n\n    return (\n      <form\n        className=\"new-movie-form\"\n        onSubmit={\n          this.onAddMovie\n        }\n      >\n        <div\n          className=\"new-movie-form__part-of-form\n            part-of-form part-of-form--title\"\n        >\n          Title:\n          <input\n            className={\n              `part-of-form__input ${(!isValid.title\n                  && wasClicked.title)\n                    && 'unvalid'}\n                ${(isValid.title\n                  && wasClicked.title)\n                    && 'valid'}`\n            }\n            value={title}\n            type=\"text\"\n            name=\"title\"\n            onChange={\n              this.handleChange\n            }\n            onClick={\n              this.clicked\n            }\n            onBlur={\n              this.validation\n            }\n          />\n          <p\n            className={`error-message--required\n              ${(errorMessageRequiredIsHidden.title\n                || !wasClicked.title)\n                  && 'hidden'}`}\n          >\n            Title is required\n          </p>\n        </div>\n\n        <div\n          className=\"new-movie-form__part-of-form part-of-form\n          part-of-form--description\"\n        >\n          Description:\n          <textarea\n            className={\n              `part-of-form__textarea\n                ${wasClicked.description\n                  && 'valid'}`\n            }\n            value={description}\n            name=\"description\"\n            onChange={this.handleChange}\n            onClick={\n              this.clicked\n            }\n          />\n        </div>\n\n        <div\n          className=\"new-movie-form__part-of-form\n            part-of-form part-of-form--imgUrl\"\n        >\n          imgUrl:\n          <input\n            className={\n              `part-of-form__input ${(!isValid.imgUrl\n                && wasClicked.imgUrl)\n                  && 'unvalid'}\n              ${(isValid.imgUrl\n                && wasClicked.imgUrl)\n                  && 'valid'}`\n            }\n            value={imgUrl}\n            type=\"text\"\n            name=\"imgUrl\"\n            onChange={\n              this.handleChange\n            }\n            onClick={\n              this.clicked\n            }\n            onBlur={\n              this.validation\n            }\n          />\n          <p\n            className={`error-message--required\n              ${(errorMessageRequiredIsHidden.imgUrl\n                || !wasClicked.imgUrl)\n                  && 'hidden'}`}\n          >\n            imgUrl is required\n          </p>\n          <p\n            className={`error-message--required\n              ${(errorMessageUnvalidIsHidden.imgUrl\n                || !wasClicked.imgUrl)\n                  && 'hidden'}`}\n          >\n            imgUrl is unvalid\n          </p>\n        </div>\n\n        <div\n          className=\"new-movie-form__part-of-form\n            part-of-form part-of-form--imdbUrl\"\n        >\n          imdbUrl:\n          <input\n            className={\n              `part-of-form__input ${(!isValid.imdbUrl\n                  && wasClicked.imdbUrl)\n                    && 'unvalid'}\n                ${(isValid.imdbUrl\n                  && wasClicked.imdbUrl)\n                    && 'valid'}`\n            }\n            value={imdbUrl}\n            type=\"text\"\n            name=\"imdbUrl\"\n            onChange={\n              this.handleChange\n            }\n            onClick={\n              this.clicked\n            }\n            onBlur={\n              this.validation\n            }\n          />\n          <p\n            className={`error-message--required\n              ${(errorMessageRequiredIsHidden.imdbUrl\n                || !wasClicked.imdbUrl)\n                  && 'hidden'}`}\n          >\n            imdbUrl is required\n          </p>\n          <p\n            className={`error-message--required\n              ${(errorMessageUnvalidIsHidden.imdbUrl\n                || !wasClicked.imdbUrl)\n                  && 'hidden'}`}\n          >\n            imdbUrl is unvalid\n          </p>\n        </div>\n\n        <div\n          className=\"new-movie-form__part-of-form\n            part-of-form part-of-form--imdbId\"\n        >\n          imdbId:\n          <input\n            className={\n              `part-of-form__input ${(!isValid.imdbId\n                && wasClicked.imdbId)\n                  && 'unvalid'}\n              ${(isValid.imdbId\n                && wasClicked.imdbId)\n                  && 'valid'}`\n            }\n            value={imdbId}\n            type=\"text\"\n            name=\"imdbId\"\n            onChange={\n              this.handleChange\n            }\n            onClick={\n              this.clicked\n            }\n            onBlur={\n              this.validation\n            }\n          />\n          <p className={`error-message--required\n            ${(errorMessageRequiredIsHidden.imdbId\n              || !wasClicked.imdbId)\n                && 'hidden'}`}\n          >\n            imdbId is required\n          </p>\n        </div>\n\n        <button\n          disabled={unvalidInputsCount}\n          className=\"new-movie-form__add-button\"\n          type=\"submit\"\n        >\n          Add a film\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}